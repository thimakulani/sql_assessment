Q1 
1.1
CREATE TABLE Employees (
    EmployeeNo INT IDENTITY(1,1) NOT NULL PRIMARY KEY,
    LastName VARCHAR(50) NOT NULL,
    FirstName VARCHAR(50) NOT NULL,
    Gender CHAR(1) NOT NULL,
    IDNumber VARCHAR(20) NOT NULL,
    SalaryLevelId INT,
    DepartmentID INT,
    CONSTRAINT FK_Department FOREIGN KEY (DepartmentID) REFERENCES Departments(DepartmentID) -- Replace 'Departments' with the name of your department table
);
1.2 ALTER TABLE Employees
ALTER COLUMN LastName VARCHAR(60);


1.3
CREATE PROCEDURE GetEmployeesByDepartment
    @DepartmentName VARCHAR(100) = NULL
AS
BEGIN
    IF @DepartmentName IS NULL
    BEGIN
        -- when dept is null
        SELECT *
        FROM Employees;
    END
    ELSE
    BEGIN
        -- when dept is provided
        SELECT E.*
        FROM Employees E
        INNER JOIN Departments D ON E.DepartmentID = D.DepartmentID
        WHERE D.DepartmentName = @DepartmentName;
    END
END;

1.4

CREATE PROCEDURE GetDepartmentEmployeeCount
AS
BEGIN
    SELECT 
        D.DepartmentName,
        COUNT(E.EmployeeNo) AS EmployeeCount
    FROM 
        Departments D
    LEFT JOIN 
        Employees E ON D.DepartmentID = E.DepartmentID
    GROUP BY 
        D.DepartmentName;
END;
1.5
CREATE PROCEDURE UpdateSalaryByDepartment
    @DepartmentName VARCHAR(100),
    @IncreasePercentage DECIMAL(10,2)
AS
BEGIN
    DECLARE @DepartmentID INT;

    -- Get the DepartmentID for the provided DepartmentName
    SELECT @DepartmentID = DepartmentID
    FROM Departments
    WHERE DepartmentName = @DepartmentName;

    -- Update the salary of each employee in the department
    UPDATE Employees
    SET SalaryLevelId = SalaryLevelId * (1 + @IncreasePercentage / 100)
    WHERE DepartmentID = @DepartmentID;
END;
1.6
Concurrency Issues: If multiple users execute the stored procedure concurrently for the same department, it might lead to concurrency issues like race conditions or inconsistent data updates. For example, one user's changes might overwrite another user's changes if proper transaction isolation levels are not set.
1.7
CREATE PROCEDURE CreateNewEmployee
    @LastName VARCHAR(50),
    @FirstName VARCHAR(50),
    @Gender CHAR(1),
    @IDNumber VARCHAR(20),
    @DepartmentID INT,
    @SalaryLevelId INT
AS
BEGIN
    DECLARE @EmployeeNo INT;

    -- Insert the new employee into the Employees table
    INSERT INTO Employees (LastName, FirstName, Gender, IDNumber, DepartmentID, SalaryLevelId)
    VALUES (@LastName, @FirstName, @Gender, @IDNumber, @DepartmentID, @SalaryLevelId);

    -- Get the automatically generated EmployeeNo for the new employee
    SET @EmployeeNo = SCOPE_IDENTITY();

    -- Return the EmployeeNo of the newly created employee
    SELECT @EmployeeNo AS EmployeeNo;
END;
1.8
CREATE PROCEDURE GetGenderCountsByDepartment
    @DepartmentName VARCHAR(100)
AS
BEGIN
    DECLARE @MaleCount INT;
    DECLARE @FemaleCount INT;

    -- Get the DepartmentID for the provided DepartmentName
    DECLARE @DepartmentID INT;
    SELECT @DepartmentID = DepartmentID
    FROM Departments
    WHERE DepartmentName = @DepartmentName;

    -- Count the number of males and females in the department
    SELECT 
        @MaleCount = COUNT(CASE WHEN Gender = 'M' THEN 1 END),
        @FemaleCount = COUNT(CASE WHEN Gender = 'F' THEN 1 END)
    FROM 
        Employees
    WHERE 
        DepartmentID = @DepartmentID;

    -- Return the counts of males and females
    SELECT 
        @MaleCount AS MaleCount,
        @FemaleCount AS FemaleCount;
END;
1.9
CREATE PROCEDURE GetSalaryAndDepartmentByEmployeeNo
    @EmployeeNo INT
AS
BEGIN
    DECLARE @SalaryLevelId INT;
    DECLARE @DepartmentName VARCHAR(100);

    -- Get the SalaryLevelId and DepartmentID for the provided EmployeeNo
    SELECT 
        @SalaryLevelId = SalaryLevelId,
        @DepartmentName = D.DepartmentName
    FROM 
        Employees E
    INNER JOIN 
        Departments D ON E.DepartmentID = D.DepartmentID
    WHERE 
        EmployeeNo = @EmployeeNo;

    -- Return the salary amount and department name
    SELECT 
        E.EmployeeNo,
        E.LastName,
        E.FirstName,
        E.Gender,
        E.IDNumber,
        E.SalaryLevelId,
        @DepartmentName AS DepartmentName,
        SL.SalaryAmount
    FROM 
        Employees E
    INNER JOIN 
        SalaryLevels SL ON E.SalaryLevelId = SL.SalaryLevelId
    WHERE 
        E.EmployeeNo = @EmployeeNo;
END;
1.10
CREATE PROCEDURE GetEmployeesWithInvalidSalaryLevel
AS
BEGIN
    -- Return all employees with a salary level ID that is not in the SalaryLevels table
    SELECT *
    FROM Employees
    WHERE SalaryLevelId NOT IN (SELECT SalaryLevelId FROM SalaryLevels);
END;


Q2
2.1.1 Employees, Departments
2.1.2Increased Storage Space: Indexes require additional storage space on disk to store index data structures. This can lead to increased storage costs, especially for large databases with many indexes.

Overhead During Write Operations: When data is inserted, updated, or deleted in a table, indexes need to be updated accordingly. This overhead can slow down write operations, especially for tables with many indexes.

Impact on Insert and Update Performance: Inserting or updating rows in a table with indexes can be slower due to the need to update the index data structures. This impact becomes more significant as the number of indexes on a table increases.

Index Maintenance Overhead: Indexes need to be maintained to ensure they remain accurate and up-to-date. This maintenance operation can consume system resources and may lead to increased CPU and I/O usage.

Increased Disk I/O: While indexes can speed up data retrieval by allowing the database engine to quickly locate rows, they also introduce additional disk I/O overhead. This can lead to increased disk I/O operations, especially for frequently accessed indexes.

Index Fragmentation: Over time, indexes may become fragmented as data is inserted, updated, or deleted in the table. Fragmentation can lead to decreased index performance and may require periodic maintenance to defragment indexes.

Query Optimizer Overhead: The query optimizer needs to consider the available indexes when generating query execution plans. Having a large number of indexes can increase the complexity of query optimization and may lead to suboptimal query plans in some cases.

Indexes Can Become Outdated: If indexes are not properly maintained or if the data distribution in the table changes significantly, indexes may become outdated and less effective. Regular monitoring and maintenance are required to ensure indexes remain relevant and provide optimal performance.

2.1.2 ISNULL always takes exactly two arguments.
COALESCE can take two or more arguments.
2.1.3
2.1.4 Using a relational table structure, where related data is organized into separate tables and linked through relationships, offers several advantages over having all fields in a single table:

Normalization: Relational databases use normalization techniques to minimize redundancy and dependency in the data. By breaking down the data into separate tables and linking them through relationships, normalization reduces data duplication and ensures data integrity.

Scalability: Relational databases are more scalable and flexible. As the data grows, it's easier to manage and maintain a relational database structure. Adding new fields or modifying existing ones is less disruptive when the data is organized into separate tables.

Data Integrity: By enforcing referential integrity through foreign key constraints, relational databases ensure that the relationships between tables are maintained. This helps prevent orphaned or inconsistent data, ensuring data integrity.

Performance: Relational databases are optimized for querying and retrieving data efficiently. With proper indexing and query optimization, relational databases can handle complex queries across multiple tables effectively.

Concurrency: Relational databases support concurrent access to data by multiple users or applications. By managing transactions and locking mechanisms, relational databases ensure data consistency and concurrency control.

Security: Relational databases provide robust security features, such as user authentication, authorization, and encryption, to protect sensitive data. Access to data can be controlled at the table level, providing granular security controls.

Overall, using a relational table structure promotes data organization, integrity, scalability, and performance, making it a preferred choice for most database applications, especially those dealing with complex data relationships and large datasets.


3.1 Creating a Function dbo.MapEcentricTestTable
To create the function dbo.MapEcentricTestTable, you can use the following SQL script:

sql
Copy code
CREATE FUNCTION dbo.MapEcentricTestTable (@Name VARCHAR(255))
RETURNS INT
AS
BEGIN
    DECLARE @ID INT;

    SELECT @ID = ID
    FROM dbo.EcentricTestTable
    WHERE Name = @Name;

    RETURN @ID;
END;
This function takes a Name parameter and returns the corresponding ID from the EcentricTestTable.

3.2 Optimizing the Query
To optimize the query, you can rewrite it to directly use the function and eliminate the need for joining tables:

sql
Copy code
SELECT *
FROM dbo.EcentricTestTable_NEW
WHERE ID = dbo.MapEcentricTestTable('Test2');
This query directly uses the dbo.MapEcentricTestTable function to get the ID corresponding to the name 'Test2' and then retrieves the corresponding row from EcentricTestTable_NEW.

4. Understanding NULL Comparisons
4.1 The result of the query SELECT CASE WHEN NULL = NULL THEN 'Yes' ELSE 'No' END AS Result will be 'No'. This is because in SQL, NULL is not equal to anything, not even to itself. Therefore, the condition NULL = NULL evaluates to FALSE, and the ELSE clause is executed.

4.2 Different settings and configurations can influence the behavior of NULL comparisons. For instance, some databases have options or configurations that can change the behavior of NULL comparisons, such as the ANSI_NULLS setting in SQL Server.

4.3 Here's a query that demonstrates different behavior based on the ANSI_NULLS setting:

sql
Copy code
SET ANSI_NULLS OFF;
SELECT CASE WHEN NULL = NULL THEN 'Yes' ELSE 'No' END AS Result;
With ANSI_NULLS OFF, the result of the query will be 'Yes'. This is because it changes the behavior of NULL comparisons to treat NULL = NULL as TRUE. However, it's important to note that using ANSI_NULLS OFF is not recommended, as it can lead to unexpected behavior and is deprecated in newer versions of SQL Server.
